<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN"
 "concept.dtd">
<concept id="AuthoringGuidelines">
  <title>Writing Task Topics</title>
  <conbody>
    <p>In addition to structuring your content in a consistent manner using the prescribed elements
      described in this document, it's important that you also write each section according to
      specific guidelines so that content can be combined in a variety of ways without it being
      readily apparent that many different authors contributed to the content. The following
      sections provide authoring guidelines for each of the major sections within a task topic.</p>
    <section id="section_l1k_222_q4">
      <title>Writing Prerequisite Sections</title>
      <p>A prerequisite is a requirement that must be met before the user can start the current
        task. Prerequisites might include:<ul id="ul_1yj_rk1_5g">
          <li>Knowledge that the user must possess.</li>
          <li>Other tasks that must be completed before beginning this task.</li>
          <li>Tools required to complete the task.</li>
          <li>Environmental or safety conditions that must be met.</li>
        </ul></p>
      <p>If there are no prerequisites, do not include this element in the topic.</p>
      <p>When writing prerequisites, follow these guidelines:<ul id="ul_fnn_zk1_5g">
          <li>If the prerequisite is explained in another topic, link to that topic, providing
            explanatory text that helps the user understand what information they will find if they
            follow the link and why it's important to the current task.</li>
          <li><?oxy_comment_start author="george" timestamp="20150128T165800+0200" comment="I am nor sure what this shuld mean and how it relates exactly with the other constraints."?>Include
            each prerequisite in an unordered list (&lt;ul>), even if there is only
            one.<?oxy_comment_end?></li>
          <li>Do not preface the list with an introductory sentence. The automatically generated
            "Prerequisites" title is adequate introduction to the list.</li>
        </ul></p>
      <p>The &lt;prereq> element is the first element in the &lt;taskbody>, as
        follows.<codeblock>&lt;taskbody>
  &lt;prereq>
    &lt;ul>
      &lt;li>...&lt;/li>
      &lt;li>...&lt;/li>
      &lt;li>...&lt;/li>
      &lt;li>...&lt;/li>
    &lt;/ul>&lt;/p>
  &lt;/prereq>
&lt;/task></codeblock></p>
    </section>
    <section>
      <title>Writing Context Sections</title>
      <p>Context sections help the user understand the purpose of the task and provide some required
        background information. This information needs to work in conjunction with any short
        description you have included in the topic. Because the short description serves as the
        introductory paragraph for the topic, you should not repeat information from the short
        description in the context section. Instead, the context section continues to build on the
        title and short description. If you have nothing more to add, simply leave out the
        &lt;context> element. Do not use the &lt;context> element simply to contain a stem sentence
        introducing the steps ("To do x, complete these steps:"). According to minimalism best
        practices, this type of introductory stem is unnecessary.</p>
      <p>When writing &lt;context> sections, follow these guidelines:<ul id="ul_jtx_n41_5g">
          <li>Use the context section to answer questions like the "five Ws" &#151; who, what, why,
            when, and where. </li>
          <li>While the context information may contain some basic conceptual information, it should
            not replace or recreate a related concept topic. If you need more than one or two
            paragraphs, consider creating a separate concept topic. You might then reference that
            concept topic in the prerequisite section of the task topic as information that the user
            should be familiar with before completing the task.</li>
          <li><!--For maintenance tasks, consider using the &lt;context> section for an overall image of
            the part or section of the equipment being maintained.--></li>
          <li><?oxy_comment_start author="george" timestamp="20150128T170455+0200" comment="Implemented as a business rule."?>Do
            not include content directly in a &lt;context> element. Instead, surround it with the
            appropriate block element, such as a &lt;p>.<?oxy_comment_end?> You can include most
            block and inline elements within the &lt;context> section. </li>
          <li>Do not use the &lt;context> element simply to contain a stem sentence introducing the
            steps ("To do x, complete these steps:"). According to minimalism best practices, this
            type of introductory stem is unnecessary.</li>
        </ul></p>
      <p><codeblock scale="80">&lt;taskbody>
  &lt;prereq/>
  &lt;context>
    &lt;p>...:
      &lt;ul>
        &lt;li>....&lt;/li>
        &lt;li>....&lt;/li>
        &lt;li>....&lt;/li>
      &lt;/ul>
    &lt;/p>
  &lt;/context>
&lt;/task></codeblock></p>
    </section>
    <section>
      <title>Writing Steps and Substeps</title>
      <p>Either the &lt;steps> or &lt;steps-unordered> elements is the focus of a good task topic.
        Although they do not contain any content themselves, they are container elements for all
        individual &lt;step> elements within the task. Similarly, the &lt;substeps> element is a
        container for individual &lt;substep> elements within a step. </p>
      <p>Regardless of whether you are writing a &lt;step> or &lt;substep>, you must include a
        &lt;cmd> element to describe the action that the user needs to take. Keep in mind the
        following guidelines when writing this command statement:<ul id="ul_db4_nx1_5g">
          <li>In general, include instructions only for a single user action. However, avoid being
            too granular. If two simple actions are logically combined, keep them together in one
            command; for example,<codeblock>&lt;cmd>....&lt;/cmd>  </codeblock></li>
          <li>Write commands in the imperative voice.</li>
          <li><?oxy_comment_start author="george" timestamp="20150128T174324+0200" comment="Maybe it will make sense to restrict the number of steps to a maximum number, for example 10 steps."?>Try
            to keep the number of steps in a procedure at a minimum. Consider breaking long
            procedures into smaller tasks, especially if the steps consist of many substeps.
            <?oxy_comment_end?></li>
          <li>If you need to orient the user to the location where the action is performed or
            qualify the step in any way, put that information first before describing the
            action.</li>
          <li>If you want to alert the user to an important safety concern about the command, place
            a &lt;note> or &lt;hazardstatement> element of the appropriate type <i>prior</i> to the
            &lt;cmd> statement as
            follows:<codeblock scale="80">Placeholder for example</codeblock></li>
          <li>Limit the command statement to one sentence. If you need to provide additional
            information about the command in order for users to successfully complete the command,
            use the elements described in <xref href="c_TaskElements.dita#TaskElements/stepelements"
            /> to do so.</li>
          <li>Try to include only one level of steps within a task. Although you can enter substeps
            to provide further detail on how to complete an individual step, too many substeps
            become difficult for a user to follow. A flat step structure is preferred. Limit your
            use of substeps to situations when most users will understand how to complete the step
            from the primary step description alone, but some users will need the additional detail.
            If most users will need the details, flatten the structure by making each substep a full
            step in the task.</li>
          <li>Do not use the step/substep structure to provide alternate ways of doing the same task
            or to provide similar steps for differing conditions. Instead create different topics
            for each situation. </li>
          <li>When using &lt;steps-unordered>, list the steps in the recommended order they should
            be completed, even though the order is not required. If any steps do require that
            another step be completed prior, include a note prior to the &lt;cmd> element within the
            step indicating the requirement. </li>
          <li>Use &lt;choices> when the user has many ways to complete the step to achieve the same
            result. Use &lt;choicetable> when the user has many options that lead to different
            results.</li>
          <li><!--To allow information after the &lt;cmd> element to be collapsed into a "twistie" so
            that users can control whether or not they want to see that information, add an
              <i>@outputclass</i> attribute to the step and indicate whether it should be initially
            collapsed (<codeph>&lt;step outputclass="collapse"></codeph>) or initially displayed
              (<codeph>&lt;step outputclass="open"></codeph>). If no <i>@outputclass</i> is
            specified, the information can never be hidden.--></li>
        </ul></p></section>

    <section>
      <title>Including Task Results</title>
      <p>A &lt;result> element enables you to describe to the user what should happen or what
        something should look like when the entire task has been completed correctly. When writing a
        results section, consider the following guidelines:<ul id="ul_hf2_jcb_5g">
          <li>Do not include a &lt;result> element if the result is obvious; for example, a simple
            restatement of the task title. </li>
          <li>Use illustrations wherever possible rather than trying to describe the result in
            words.</li>
        </ul><codeblock>Placeholder for example</codeblock></p>
    </section>
    <section>
      <title>Writing Task Troubleshooting Sections</title>
      <p>A &lt;steptroubleshooting> or &lt;tasktroubleshooting> element contains one or more actions
        for solving a problem the user may encounter while completing a task. When writing a
        troubleshooting section within a task topic, consider the following guidelines:<ul
          id="ul_ncx_pjm_jm">
          <li>Think about likely places that the user might make a mistake. Include a
            &lt;steptroubleshooting> element at those locations. </li>
          <li>Avoid language that implies the user is at fault. In this case, use of passive voice
            is preferable to directly blaming the user. For example, say "The wrong data was
            entered" rather than "You entered the wrong data."</li>
          <li>Keep the explanations and instructions short. For complex solutions, consider linking
            to a longer, more comprehensive troubleshooting topic. </li>
        </ul></p>
    </section>
    <section>
      <title>Including Examples</title>
      <p>Users can greatly benefit from examples that illustrate the task they are trying to
        complete or that help them relate a concept to their own situation. Use the &lt;example>
        section at the end of the task to present specific scenarios and show how the task would be
        completed in those scenarios. When choosing examples to include, follow these guidelines:<ul
          id="ul_hxn_czv_3h">
          <li>Include examples for difficult-to-understand tasks and concepts.</li>
          <li>Choose examples that the majority of your users can relate to.</li>
          <li>Choose examples of average complexity, not too simple nor too difficult.</li>
          <li>Choose comprehensive examples that exercise all the steps in a procedure.</li>
          <li>Use customer-support or training as a resource for the types of examples that will be
            useful to your users.</li>
          <li>Set up the scenario for the example clearly at the beginning of the example.</li>
          <li>Do not include multiple scenarios in one example; instead, use multiple example
            elements, and
            <?oxy_comment_start author="george" timestamp="20150128T175159+0200" comment="This may be implemented as a business rule."?>include
            a &lt;title> element within each example to differentiate between
            them.<?oxy_comment_end?></li>
        </ul><codeblock>Placeholder for example</codeblock></p>
    </section>
    <section>
      <title>Writing Postrequisites</title>
      <p>A &lt;postreq> specifies anything that the user needs to know or do after completing the
        task. This information may include actions that need to be completed before the user can see
        the expected results, such as information that the user needs to read or cross-reference to
        verify the completion of the task. When writing a postrequisite, follow these guidelines: <ul>
          <li>Do not include steps. If the postrequisite is another procedure, link to that
            procedure instead.</li>
          <li>Do not include obvious actions, such as removing safety equipment or cleaning up the
            area.</li>
          <li>Include information about the criticality of the postrequisite; for example, does it
            need to be completed before any other action can be taken?</li>
        </ul><codeblock>Placeholder for example</codeblock></p>
    </section>
    <section audience="rules">
      <dl>
        <dlhead>
          <dthd>Rule</dthd>
          <ddhd>dita-allowOnlyBlockElements</ddhd>
        </dlhead>
        <dlentry>
          <dt>element</dt>
          <dd>context</dd>
        </dlentry>
        <dlentry>
          <dt>message</dt>
          <dd>Do not include content directly in a "context" element or an inline element. Instead,
            surround it with the appropriate block element, such as a "p".</dd>
        </dlentry>
      </dl>
    </section>
  </conbody>
</concept>
