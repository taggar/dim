<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  version="2.0">
  <xsl:output indent="yes"/>
  
  <xsl:variable name="baseDescriptions" select="resolve-uri('rules/ditaContentCompletionElementsMap.xml', base-uri(/))"/>
  <xsl:variable name="library" select="resolve-uri('rules/library.sch', base-uri(/))"/>
  <xsl:variable name="base" select="resolve-uri('.', base-uri(/))"/>  
  <xsl:param name="title" select="normalize-space((@title,//*[contains(@class, ' topic/title ')])[1])"/>  
    
  <xsl:template match="/">
    <xsl:result-document href="{$base}rules/contentCompletionElementsMap.xml">
      <xsl:comment>
        Do not edit this file directly!
        This file is generated automatically by processing 
        <xsl:value-of select="substring-after(base-uri(/), $base)"/>
        If you want to change the mappings, edit the corresponding metadata data
        elements marked with name="styleguide" in the corresponding topic files.
      </xsl:comment>
      <contentCompletionElementsMap
        redirectURLPrefix="http://www.oxygenxml.com/redirect-url.php?url="
        htmlContentFilterStylesheet="contentFilter.xsl">
        <mappingGroup
          xml:base="http://example.com/styleguide/webhelp/">
        <xsl:apply-templates mode="mapping" select="."/>
        </mappingGroup>
        <xsl:copy-of select="document($baseDescriptions)/*/node()"/>
      </contentCompletionElementsMap>
    </xsl:result-document>
  </xsl:template>

  <xsl:template match="*[contains(@class, ' map/topicref ')]" mode="mapping">
    <xsl:apply-templates select="document(@href, .)" mode="mapping"/>
    <xsl:apply-templates mode="mapping"/>
  </xsl:template>
  
  <xsl:template match="data[@audience='styleguide']" mode="mapping"> 
    <xsl:variable name="origin" select="substring-after(base-uri(.), $base)"/>
    <xsl:variable name="target" select="replace($origin, '.dita', '.html')">
    </xsl:variable>
    <xsl:choose>
      <xsl:when test="starts-with(@name, '@')">
        <mapping attributeName="{substring-after(@name, '@')}" path="{$target}" type="link" linkText="{@value}"/>
      </xsl:when>
      <xsl:otherwise>
        <mapping elementName="{@name}" path="{$target}" type="link" linkText="{@value}"/>
      </xsl:otherwise>
    </xsl:choose>
    
  </xsl:template>
  
  <xsl:template match="*" mode="mapping">
    <xsl:apply-templates mode="mapping"/>
  </xsl:template>
  
  <xsl:template match="text()" mode="mapping"/>

    
  
</xsl:stylesheet>